<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>面试问到的问题(合集)</title>
      <link href="/2021/09/22/%E9%9D%A2%E8%AF%95%E9%97%AE%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98(%E5%90%88%E9%9B%86)/"/>
      <url>/2021/09/22/%E9%9D%A2%E8%AF%95%E9%97%AE%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98(%E5%90%88%E9%9B%86)/</url>
      
        <content type="html"><![CDATA[<h3 id="问-解释一下包围盒碰撞原理"><a href="#问-解释一下包围盒碰撞原理" class="headerlink" title="问:解释一下包围盒碰撞原理"></a><font color="#ff0000">问:解释一下包围盒碰撞原理</font></h3><p>答:包围盒有八个点,那就意味着每个包围盒必定有一个最大值和最小。由轴判断两个包围盒的的最大值和最小值的大小来判断两个包围盒是否相交。<br>只有当<font color="#ff0000">每个轴</font>上的最大值<font color="#ff0000">大于等于</font>每个轴上的最小值才能证明是<font color="#ff0000">相交</font>,其它情况均为不相交</p><p>立方体与立方体碰撞</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">bool</span> <span class="title">isIntersectedByAABB</span>(<span class="params">AABB boundA,AABB boundB</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (boundA.GetMax().x &gt;= boundB.GetMin().x &amp;&amp;   <span class="comment">//X轴</span></span><br><span class="line">    boundA.GetMax().y &gt;= boundB.GetMin().y &amp;&amp;           <span class="comment">//Y轴</span></span><br><span class="line">    boundA.GetMax().z &gt;= boundB.GetMin().z);            <span class="comment">//Z轴</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>球体与球体碰撞</p><p>比较它们的圆心距离和半径距离的关系,如果两球的圆心距离小于等于半径和,那就证明碰撞了</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">bool</span> <span class="title">isIntersectedBySphere</span>(<span class="params">AABB sphereA,AABB sphereB</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ( Vector3.DistanceSqr(sphereA.center(),sphereB.center()) &lt;= Math.pow((sphereA.radius + spereB.radius),<span class="number">2</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>球体与立方体碰撞</p><p>最简单的方法就是就是遍历立方体的所有顶点跟球体半径求距离,如果求出来的距离是小于等于球体半径的,那就是碰撞了。<br>另一种方法就是求出立方体和球体中心点最近的那个点,然后比较跟里球体中心点的距离和半径的关系。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">bool</span> <span class="title">isIntersectedByMix</span>(<span class="params">AABB bound,AABB sphere</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">float</span> x = Math.max(bound.min().x,Math.min(bound.max().x,sphere.center().x));</span><br><span class="line">    <span class="keyword">float</span> y = Math.max(bound.min().y,Math.min(bound.max().y,sphere.center().y));</span><br><span class="line">    <span class="keyword">float</span> z = Math.max(bound.min().z,Math.min(bound.max().z,sphere.center().z));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">float</span> dis = Vector3.Distance(sphere.center(),<span class="keyword">new</span> vector3(x,y,z));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> dis &lt;= shpere.radius;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="问-说一下四元数"><a href="#问-说一下四元数" class="headerlink" title="问:说一下四元数"></a><font color="#ff0000">问:说一下四元数</font></h3><p>答:<br>(答得不好)解决万向锁的问题,四元数点乘跟向量点乘类似,ArCos(点乘积)能求出两个四元数相差的角度,点积等于1,两四元数相等;点积等于0,两四元数垂直;点积等于-1,两四元数相反。四元数插值Slerp可以加上个判断当连四元数点积大于&gt;0.99时就停止插值。</p><h3 id="问-说下Camera组件每个参数的含义以及应用场景"><a href="#问-说下Camera组件每个参数的含义以及应用场景" class="headerlink" title="问:说下Camera组件每个参数的含义以及应用场景"></a><font color="#ff0000">问:说下Camera组件每个参数的含义以及应用场景</font></h3><p>答：百度</p><h3 id="问-说下Lightling组件每个参数的含义以及应用场景"><a href="#问-说下Lightling组件每个参数的含义以及应用场景" class="headerlink" title="问:说下Lightling组件每个参数的含义以及应用场景"></a><font color="#ff0000">问:说下Lightling组件每个参数的含义以及应用场景</font></h3><p>答：百度</p><h3 id="问-有无用过开源的游戏框架"><a href="#问-有无用过开源的游戏框架" class="headerlink" title="问:有无用过开源的游戏框架"></a><font color="#ff0000">问:有无用过开源的游戏框架</font></h3><p>答：无</p><h3 id="问-说下APK包下的OS"><a href="#问-说下APK包下的OS" class="headerlink" title="问:说下APK包下的OS"></a><font color="#ff0000">问:说下APK包下的OS</font></h3><p>答： </p><h3 id="问-说下LZ4和LZ4HC的区别"><a href="#问-说下LZ4和LZ4HC的区别" class="headerlink" title="问:说下LZ4和LZ4HC的区别"></a><font color="#ff0000">问:说下LZ4和LZ4HC的区别</font></h3><p>答:<br>LZ4:压缩速度快,适用于开发版本的快速压缩<br>LZ4HC:更高的压缩率和更好的加载性能,一般用于正式发布</p><h3 id="问-怎么管理单例类"><a href="#问-怎么管理单例类" class="headerlink" title="问:怎么管理单例类"></a><font color="#ff0000">问:怎么管理单例类</font></h3><p>答:<br>写个单例基类,单例分三种,一种是不继承至MonoBehavior的单例,一种是继承至MonoBehavior的单例并且自动生成GameObj物体,例如PoolMnnager,回收时把物体挂在生成的PoolManager物体下;一种是继承至MonoBehavior的但不自动生成GameObj物体,例如CameraController。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Unity遇到的奇奇怪怪的坑(持续更新)</title>
      <link href="/2021/08/17/Unity%E9%81%87%E5%88%B0%E7%9A%84%E5%A5%87%E5%A5%87%E6%80%AA%E6%80%AA%E7%9A%84%E5%9D%91%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%E6%88%96%E6%8A%80%E5%B7%A7(%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0)/"/>
      <url>/2021/08/17/Unity%E9%81%87%E5%88%B0%E7%9A%84%E5%A5%87%E5%A5%87%E6%80%AA%E6%80%AA%E7%9A%84%E5%9D%91%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%E6%88%96%E6%8A%80%E5%B7%A7(%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0)/</url>
      
        <content type="html"><![CDATA[<hr><ol><li><p>UI预制体加载后要用<code>Instantiate(GameObject go,Transform parnet)</code>设置父物体,直接生成出来会改变UI的RectTransform本身的属性</p></li><li><p>for循环中使用异步方法并且需要用到i时,用临时变量存住i,比如</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">for(int i=0;i&lt;10;i++)</span><br><span class="line">&#123;</span><br><span class="line">    int index = i;</span><br><span class="line">    ResManager.instance.loadResAsync(&quot;path&quot;,(obj)=&gt;&#123;</span><br><span class="line">        obj.name = index;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>初学Shader(代码向)遇到的坑</title>
      <link href="/2021/07/16/%E5%88%9D%E5%AD%A6Shader(%E4%BB%A3%E7%A0%81%E5%90%91)%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/"/>
      <url>/2021/07/16/%E5%88%9D%E5%AD%A6Shader(%E4%BB%A3%E7%A0%81%E5%90%91)%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/</url>
      
        <content type="html"><![CDATA[<h2 id="直入主题"><a href="#直入主题" class="headerlink" title="直入主题"></a>直入主题</h2><ol><li>Struct没加分号</li><li>Properties的变量名与Pass内的变量名没对应上</li><li>Properties的变量没有在Pass内声明</li><li>没有给顶点着色器的输入结构体里的值全部赋值</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 排坑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>物体B绕物体A旋转的方法</title>
      <link href="/2020/06/05/%E7%89%A9%E4%BD%93B%E7%BB%95%E7%89%A9%E4%BD%93A%E6%97%8B%E8%BD%AC%E7%9A%84%E6%96%B9%E6%B3%95/"/>
      <url>/2020/06/05/%E7%89%A9%E4%BD%93B%E7%BB%95%E7%89%A9%E4%BD%93A%E6%97%8B%E8%BD%AC%E7%9A%84%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h3 id="先看图"><a href="#先看图" class="headerlink" title="先看图"></a>先看图</h3><p>  <img src="/2020/06/05/物体B绕物体A旋转的方法/%E7%82%B9A%E4%B8%8E%E5%8E%9F%E7%82%B9O%E7%9A%84%E5%85%B3%E7%B3%BB.png" alt="点A与原点O的关系"></p><p>  首先明确一点,<del><code>θ可以用QQ拼音&quot;西塔&quot;或者&quot;theta&quot;打出来</code></del>,A.x和A.y是决定点A的位置,也就是A的坐标是未知,你要求赋予A坐标,A才会运动。假如点A要绕原点O做圆周运动,那么R就是圆的半径,O就是圆心。那么就有<code>sinθ=A.y/R</code>,<code>cosθ=A.x/R</code>,公式变化一下就有:</p><a id="more"></a><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">A.x = cosθ*R;</span><br><span class="line">A.y = sinθ*R;</span><br></pre></td></tr></table></figure><p>  <img src="/2020/06/05/物体B绕物体A旋转的方法/A%E8%BF%90%E5%8A%A8%E5%88%B0B.png" alt="A运动到B"><br>  当物体A绕原点O做圆周运动到B时,可以发现,夹角θ变大了,也就是说明,<strong>θ越大,物体向逆时针运动</strong>。讲到这,相信大家都懂如何实现这个功能了,以下是代码.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Transform obj;<span class="comment">//相当于原点O 也就是你要绕着转的物体</span></span><br><span class="line">Vector2 pos;<span class="comment">//临时变量</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">float</span> angle = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">float</span> RoutateSpeed;<span class="comment">//旋转速度</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">float</span> radius;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">FixedUpdate</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    angle += RoutateSpeed * Time.fixedDeltaTime;</span><br><span class="line">    pos.x = obj.position.x + Mathf.Cos(angle) * radius;</span><br><span class="line">    pos.y = obj.position.y + Mathf.Sin(angle) * radius;</span><br><span class="line">    transform.position = pos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  其实到这里还有一个问题,那就是,标题的物体B在哪?</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Cocos葵花宝典</title>
      <link href="/2020/05/23/Cocos%E8%91%B5%E8%8A%B1%E5%AE%9D%E5%85%B8/"/>
      <url>/2020/05/23/Cocos%E8%91%B5%E8%8A%B1%E5%AE%9D%E5%85%B8/</url>
      
        <content type="html"><![CDATA[<h3 id="记录一下"><a href="#记录一下" class="headerlink" title="记录一下"></a>记录一下</h3><a id="more"></a><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><span class="line">cc.log(<span class="string">'描述'</span>);<span class="comment">//输出日志,若是变量则不加引号,若是多个输出则互相用"+"连接</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = cc.find(<span class="string">'Canvas/logo'</span>);<span class="comment">//获取节点</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">this</span>.node.parent;<span class="comment">//获取父节点</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">this</span>.node.getChildByName(<span class="string">'name'</span>);<span class="comment">//获取子节点</span></span><br><span class="line"><span class="keyword">var</span> a = cc.find(<span class="string">"bg/score"</span>,<span class="keyword">this</span>.node);<span class="comment">//获取多层级下的子节点</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">this</span>.node.getComponent(cc.Label);<span class="comment">//获取当前节点上的组件</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">this</span>.node.getComponent(<span class="string">'web'</span>);<span class="comment">//获取当前节点上的脚本</span></span><br><span class="line"><span class="keyword">var</span> notice = cc.find(<span class="string">"Canvas/notice"</span>)||cc.find(<span class="string">"Notice"</span>);<span class="comment">//获取其中一个存在的节点</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.node.getComponent(cc.Label).string = <span class="string">'你好'</span>;<span class="comment">//改变组件的属性的值</span></span><br><span class="line"><span class="keyword">this</span>.node.getComponent(cc.Label).enabled = <span class="literal">false</span>;<span class="comment">//关闭组件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.scheduleOnce(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;,<span class="number">2</span>);<span class="comment">//计算1次的计时器,2秒后执行</span></span><br><span class="line"><span class="keyword">this</span>.schedule(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;,<span class="number">5</span>);<span class="comment">//每隔5秒执行1次</span></span><br><span class="line"><span class="keyword">this</span>.schedule(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;,<span class="number">0.1</span>,<span class="number">8</span>,<span class="number">1</span>);<span class="comment">//计算多次的计时器（1秒后执行，并以0.1秒的间隔执行，总共执行9次）</span></span><br><span class="line"><span class="keyword">this</span>.unscheduleAllCallbacks(<span class="keyword">this</span>);<span class="comment">//停止this指向的所有计时器</span></span><br><span class="line"></span><br><span class="line">触摸监听【开始<span class="string">'touchstart'</span>，移动<span class="string">'touchmove'</span>，结束<span class="string">'touchend'</span>，取消<span class="string">'touchcancel'</span>】</span><br><span class="line"><span class="keyword">this</span>.node.on(<span class="string">'touchend'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;<span class="comment">/*执行操作部分*/</span>&#125;,<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.node.active = <span class="literal">false</span>;<span class="comment">//隐藏节点</span></span><br><span class="line"><span class="keyword">this</span>.node.destroy();<span class="comment">//销毁节点</span></span><br><span class="line"><span class="keyword">this</span>.node.x = <span class="number">100</span>;<span class="comment">//设置节点x轴坐标</span></span><br><span class="line"><span class="keyword">this</span>.node.y = <span class="number">100</span>;<span class="comment">//设置节点y轴坐标</span></span><br><span class="line"><span class="keyword">this</span>.node.scale = <span class="number">2</span>;<span class="comment">//设置节点缩放比例</span></span><br><span class="line"><span class="keyword">this</span>.node.rotation = <span class="number">90</span>;<span class="comment">//设置节点旋转角度</span></span><br><span class="line"><span class="keyword">this</span>.node.width = <span class="number">100</span>;<span class="comment">//设置节点宽度</span></span><br><span class="line"><span class="keyword">this</span>.node.height = <span class="number">100</span>;<span class="comment">//设置节点高度</span></span><br><span class="line"><span class="keyword">this</span>.node.opacity = <span class="number">128</span>;<span class="comment">//设置节点透明度（0~255）</span></span><br><span class="line"><span class="keyword">this</span>.node.color = <span class="keyword">new</span> cc.color(<span class="number">100</span>,<span class="number">100</span>,<span class="number">100</span>,<span class="number">255</span>);<span class="comment">//设置节点颜色（R,G,B,透明度）</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.node.runAction(cc.moveTo(<span class="number">1</span>,<span class="number">50</span>,<span class="number">50</span>));<span class="comment">//移动当前节点</span></span><br><span class="line"><span class="keyword">this</span>.node.runAction(cc.scaleTo(<span class="number">1</span>,<span class="number">0.7</span>,<span class="number">0.8</span>));<span class="comment">//缩放当前节点</span></span><br><span class="line"><span class="keyword">this</span>.node.runAction(cc.rotateTo(<span class="number">1</span>,<span class="number">160</span>));<span class="comment">//旋转当前节点</span></span><br><span class="line"><span class="keyword">this</span>.node.runAction(cc.skewTo(<span class="number">1</span>,<span class="number">5</span>,<span class="number">-5</span>));<span class="comment">//变化节点倾斜度</span></span><br><span class="line"><span class="keyword">this</span>.node.runAction(cc.fadeTo(<span class="number">2</span>,<span class="number">0</span>));<span class="comment">//变化当前节点的透明度</span></span><br><span class="line"><span class="keyword">this</span>.node.runAction(cc.tintTo(<span class="number">2</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0</span>));<span class="comment">//变化当前节点颜色</span></span><br><span class="line"><span class="keyword">this</span>.node.stopAllActions();<span class="comment">//停止所有动作</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.node.runAction(cc.sequence(cc.moveBy(<span class="number">0.5</span>,<span class="number">200</span>,<span class="number">0</span>),cc.moveBy(<span class="number">0.5</span>,<span class="number">-200</span>,<span class="number">0</span>)));<span class="comment">//先向右移动,再向左移动</span></span><br><span class="line"><span class="keyword">this</span>.node.runAction(cc.spawn(cc.moveBy(<span class="number">0.5</span>,<span class="number">0</span>,<span class="number">50</span>),cc.scaleTo(<span class="number">0.5</span>,<span class="number">1.5</span>,<span class="number">1.5</span>)));<span class="comment">//向上移动的同时缩放</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.node.runAction(cc.moveTo(<span class="number">1</span>,<span class="number">50</span>,<span class="number">50</span>).easing(cc.easeIn(<span class="number">1.0</span>)));<span class="comment">//加速</span></span><br><span class="line"><span class="keyword">this</span>.node.runAction(cc.scaleTo(<span class="number">1</span>,<span class="number">0.7</span>,<span class="number">0.8</span>)).easing(cc.easeOut(<span class="number">1.0</span>));<span class="comment">//减速</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.node.runAction(cc.sequence(cc.moveBy(<span class="number">1</span>,<span class="number">50</span>,<span class="number">50</span>),cc.callFunc(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;<span class="comment">//动作执行的回调</span></span><br><span class="line">    <span class="comment">//回调内容</span></span><br><span class="line">&#125;,<span class="keyword">this</span>, <span class="literal">null</span>)));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cc.audioEngine.playMusic(<span class="keyword">this</span>.BGAudio,<span class="literal">true</span>);<span class="comment">//播放背景音乐</span></span><br><span class="line">cc.audioEngine.pauseMusic();<span class="comment">//暂停播放背景音乐</span></span><br><span class="line">cc.audioEngine.resumeMusic();<span class="comment">//继续播放背景音乐</span></span><br><span class="line">cc.audioEngine.stopMusic();<span class="comment">//停止播放背景音乐</span></span><br><span class="line">cc.audioEngine.playEffect(<span class="keyword">this</span>.ClickAudio,<span class="literal">false</span>);<span class="comment">//播放音效</span></span><br><span class="line">cc.audioEngine.setMusicVolume(参数);<span class="comment">//设置背景音乐的音量（该参数范围是0到1）</span></span><br><span class="line">cc.audioEngine.setEffectsVolume(参数);<span class="comment">//设置音效的音量（该参数范围是0到1）</span></span><br><span class="line">cc.audioEngine.play(cc.url.raw(<span class="string">"resources/sounds/btnClick.mp3"</span>), <span class="literal">false</span>);<span class="comment">//播放资源路径下的音频</span></span><br><span class="line"></span><br><span class="line">cc.director.loadScene(<span class="string">'场景名称'</span>);<span class="comment">//场景跳转</span></span><br><span class="line">cc.director.preloadScene(<span class="string">'场景名称'</span>);<span class="comment">//预加载场景</span></span><br><span class="line"><span class="keyword">var</span> a = cc.director.getScene();<span class="comment">//场景主节点</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = cc.instantiate(list);<span class="comment">//克隆节点</span></span><br><span class="line"><span class="keyword">this</span>.node.addChild(nodename);<span class="comment">//添加子节点</span></span><br><span class="line"><span class="keyword">this</span>.node.parent = parentNode;<span class="comment">//绑定父节点</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">this</span>.node.children;<span class="comment">//获取所有子节点</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">this</span>.node.childrenCount;<span class="comment">//获取子节点数量</span></span><br><span class="line"><span class="keyword">var</span> sprite = <span class="keyword">this</span>.node.getComponentInChildren(cc.Sprite);<span class="comment">//递归查找所有子节点中匹配指定类型的组件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = cc.director.getWinSizeInPixels().width<span class="comment">//获得设备分辨率的宽度</span></span><br><span class="line"><span class="keyword">var</span> b = cc.director.getWinSizeInPixels().height<span class="comment">//获得设备分辨率的高度</span></span><br><span class="line"></span><br><span class="line">输入框监听【输入框获得焦点时触发<span class="string">'editing-did-began'</span>，每一次输入文字变化时触发<span class="string">'editing-did-began'</span>，</span><br><span class="line">                    输入框失去焦点时触发<span class="string">'editing-did-ended'</span>，按下回车时触发<span class="string">'editing-return'</span>】</span><br><span class="line"><span class="keyword">this</span>.node.on(<span class="string">'editing-did-began'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;<span class="comment">/*执行操作部分*/</span>&#125;,<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">cc.callFunc(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;<span class="comment">//回调函数</span></span><br><span class="line">    <span class="comment">/*执行操作部分*/</span></span><br><span class="line">&#125;,<span class="keyword">this</span>, <span class="literal">null</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.node.on(<span class="string">'Hi'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="comment">//注册监听</span></span><br><span class="line">    cc.log(<span class="string">'听到了'</span>);</span><br><span class="line">&#125;,<span class="keyword">this</span>);</span><br><span class="line"><span class="keyword">this</span>.node.emit(<span class="string">'Hi'</span>);<span class="comment">//发送监听广播</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.a = <span class="string">"hello world"</span>;<span class="comment">//定义全局变量</span></span><br><span class="line"><span class="built_in">window</span>.G = &#123;<span class="comment">//定义全局变量集合</span></span><br><span class="line">    a: <span class="literal">null</span>,</span><br><span class="line">    b: <span class="literal">null</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params"></span>).<span class="title">bind</span>(<span class="params">this</span>);//绑定当前锁定的<span class="title">this</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">cc</span>.<span class="title">sys</span>.<span class="title">localStorage</span>.<span class="title">setItem</span>(<span class="params"><span class="string">'存储标识名'</span>,变量名</span>);//存储存档数据</span></span><br><span class="line"><span class="function"><span class="title">var</span> <span class="title">a</span> = <span class="title">cc</span>.<span class="title">sys</span>.<span class="title">localStorage</span>.<span class="title">getItem</span>(<span class="params"><span class="string">'存储标识名'</span></span>);//读取存档数据</span></span><br><span class="line"><span class="function"><span class="title">cc</span>.<span class="title">sys</span>.<span class="title">localStorage</span>.<span class="title">removeItem</span>(<span class="params"><span class="string">'存储标识名'</span></span>);//擦除存档数据</span></span><br><span class="line"><span class="function"><span class="title">cc</span>.<span class="title">sys</span>.<span class="title">localStorage</span>.<span class="title">setItem</span>(<span class="params"><span class="string">'userData'</span>, JSON.stringify(userData</span>));//存取复杂对象数据</span></span><br><span class="line"><span class="function"><span class="title">var</span> <span class="title">userData</span> = <span class="title">JSON</span>.<span class="title">parse</span>(<span class="params">cc.sys.localStorage.getItem(<span class="string">'userData'</span></span>));//读取复杂对象数据</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">cc</span>.<span class="title">director</span>.<span class="title">pause</span>(<span class="params"></span>);//游戏暂停</span></span><br><span class="line"><span class="function"><span class="title">cc</span>.<span class="title">director</span>.<span class="title">resume</span>(<span class="params"></span>);//游戏继续</span></span><br><span class="line"><span class="function"><span class="title">cc</span>.<span class="title">director</span>.<span class="title">end</span>(<span class="params"></span>);//退出整个应用</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">var</span> <span class="title">x</span> = <span class="title">event</span>.<span class="title">getLocationX</span>(<span class="params"></span>);//获取触摸点的坐标<span class="title">X</span></span></span><br><span class="line"><span class="function"><span class="title">var</span> <span class="title">y</span> = <span class="title">event</span>.<span class="title">getLocationY</span>(<span class="params"></span>);//获取触摸点的坐标<span class="title">Y</span></span></span><br><span class="line"><span class="function"><span class="title">var</span> <span class="title">a</span> = <span class="title">event</span>.<span class="title">getID</span>(<span class="params"></span>);//获取触点的<span class="title">ID</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">node</span>.<span class="title">getLocalZOrder</span>(<span class="params"></span>);//层级获取</span></span><br><span class="line"><span class="function"><span class="title">node</span>.<span class="title">setLocalZOrder</span>(<span class="params"><span class="number">1</span></span>);//层级改变</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">//定义模块(<span class="params">可放在脚本中的任意位置定义</span>)</span></span><br><span class="line"><span class="function"><span class="title">module</span>.<span class="title">exports</span> = </span>&#123;</span><br><span class="line">        a:<span class="string">'123'</span>,<span class="comment">//变量</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> Game = <span class="built_in">require</span>(<span class="string">'Game'</span>);<span class="comment">//包含模块</span></span><br><span class="line">cc.log(Game.a );<span class="comment">//读取模块里的变量</span></span><br><span class="line"></span><br><span class="line">cc.sys.openURL(<span class="string">'Http://www.baidu.com'</span>);<span class="comment">//打开网页</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//加载预制体,路径必须在"assets\resources"下,例子中路径为:"assets\resources\prefabs/name"</span></span><br><span class="line">cc.loader.loadRes(<span class="string">"prefabs/name"</span>,<span class="function"><span class="keyword">function</span> (<span class="params">err,prefab</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> newNode = cc.instantiate(prefab);</span><br><span class="line">    newNode.parent = cc.find(<span class="string">"Canvas"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//动态更换精灵的纹理,路径必须在"assets\resources"下,例子中路径为:"assets\resources\imgs\xx.png"</span></span><br><span class="line"><span class="keyword">var</span> texture = cc.textureCache.addImage(cc.url.raw(<span class="string">'imgs/xx.png'</span>));</span><br><span class="line"><span class="keyword">this</span>.node.getComponent(cc.Sprite).spriteFrame.setTexture(texture);</span><br><span class="line"></span><br><span class="line"><span class="comment">//动态加载本地资源(不带文件类型后缀),路径必须在"assets\resources"下</span></span><br><span class="line">cc.loader.loadRes(<span class="string">"name"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">    cc.log(data.num)<span class="comment">//根据资源类型选择合适的读取方式,本例是json文件</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">cc.loader.releaseRes(<span class="string">"资源路径"</span>);<span class="comment">//销毁动态加载的本地资源</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//动态运行脚本</span></span><br><span class="line"><span class="keyword">var</span> MsgListen = <span class="built_in">require</span>(<span class="string">"MsgListen"</span>);<span class="comment">//获取对象</span></span><br><span class="line"><span class="keyword">var</span> msgListen = <span class="keyword">new</span> MsgListen();<span class="comment">//创建对象实例</span></span><br><span class="line">msgListen.init();<span class="comment">//运行对象中定义的函数(此函数跟onLoad函数同级)</span></span><br><span class="line"></span><br><span class="line">cc.game.addPersistRootNode(myNode);<span class="comment">//常驻节点,必须位于层级的根节点</span></span><br><span class="line">cc.game.removePersistRootNode(myNode);<span class="comment">//取消常驻节点</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Cocos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cocos做的微信小程序</title>
      <link href="/2020/05/23/Cocos%E5%81%9A%E7%9A%84%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
      <url>/2020/05/23/Cocos%E5%81%9A%E7%9A%84%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h3 id="方便用于展示"><a href="#方便用于展示" class="headerlink" title="方便用于展示"></a>方便用于展示</h3><hr><p>扫我申请</p><p>  <img src="/2020/05/23/Cocos做的微信小程序/aaa.png" alt="aaa"> </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Cocos发布微信小游戏时容量太大问题</title>
      <link href="/2020/01/07/Cocos%E5%8F%91%E5%B8%83%E5%BE%AE%E4%BF%A1%E5%B0%8F%E6%B8%B8%E6%88%8F%E6%97%B6%E5%AE%B9%E9%87%8F%E5%A4%AA%E5%A4%A7%E9%97%AE%E9%A2%98/"/>
      <url>/2020/01/07/Cocos%E5%8F%91%E5%B8%83%E5%BE%AE%E4%BF%A1%E5%B0%8F%E6%B8%B8%E6%88%8F%E6%97%B6%E5%AE%B9%E9%87%8F%E5%A4%AA%E5%A4%A7%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h3 id="清除项目用不到的模块部分"><a href="#清除项目用不到的模块部分" class="headerlink" title="清除项目用不到的模块部分"></a>清除项目用不到的模块部分</h3><p>Cocos引擎贯彻模块化,不仅代码可以模块化,引擎也可以模块化。所以我们只需要把不需要用到的模块不导出就行了。 位于<code>Project-Project Setting-Module Config</code>,把你所不需要的…什么?看不懂英文?你用的是中文版?,这波我的,我自罚一杯。把你用不到的模块反选就瘦身成功了。</p><a id="more"></a><hr><h3 id="分包"><a href="#分包" class="headerlink" title="分包"></a>分包</h3><p>我做完第一步,容量就足够我导出了。所以分包没研究过，不会做，自己百度去。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 解决小问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>接入微信开发者平台遇到的问题</title>
      <link href="/2020/01/05/%E6%8E%A5%E5%85%A5%E5%BE%AE%E4%BF%A1%E5%BC%80%E5%8F%91%E8%80%85%E5%B7%A5%E5%85%B7%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/2020/01/05/%E6%8E%A5%E5%85%A5%E5%BE%AE%E4%BF%A1%E5%BC%80%E5%8F%91%E8%80%85%E5%B7%A5%E5%85%B7%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="这篇文章用来更新Cocos接入微信小游戏平台我所所遇的所有代码问题"><a href="#这篇文章用来更新Cocos接入微信小游戏平台我所所遇的所有代码问题" class="headerlink" title="这篇文章用来更新Cocos接入微信小游戏平台我所所遇的所有代码问题"></a>这篇文章用来更新Cocos接入微信小游戏平台我所所遇的所有<strong>代码</strong>问题</h2><p>  闲话：谁又能想到学了一两年Unity的我突然被赶鸭子上架去学Cocos和JS呢。<del>但这丝毫不影响我一个月内就学会Cocos和JS,今天DJ又无敌了吗</del><br>    咳咳,相信大家都有在Broswer或者Simulator运行时没有报错,但是一在微信开发者工具运行就报错的情况,简直跟吃了<del>欧力给</del>一样难受,下面来为大家排坑,没找到你遇到的错误的话,那可真是<code>果咩纳塞</code>了。</p><a id="more"></a><h3 id="问题1"><a href="#问题1" class="headerlink" title="问题1"></a>问题1</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> data = <span class="built_in">JSON</span>.parse(cc.sys.localStorage.getItem(<span class="string">'userData'</span>));</span><br><span class="line">  <span class="keyword">if</span>(data)&#123;</span><br><span class="line">      <span class="comment">//to do sth</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="comment">// to do sth</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>错误行数: 第1行<br>出现情况: 启动游戏时判断本地内存有没有存档,如果是第一次启动游戏就会报错。</p><p>  原因: 因为第一次启动时 <code>cc.sys.localStorage.getItem(&#39;userData&#39;)</code><br>  本来就没有东西,<code>JSON.parse()</code>一个空的东西肯定报错,所以先用变量把取出的东西存起来判空,再进行操作。PS：网上有说<code>cc.sys.localStorage.getItem(xxx)</code>没东西时在cocos是为null,在微信开发者平台为 “” 字符串。</p><pre><code>修正后：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> data = cc.sys.localStorage.getItem(<span class="string">'userData'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (data) &#123;</span><br><span class="line">        <span class="keyword">let</span> userData = <span class="built_in">JSON</span>.parse(data);</span><br><span class="line">        to <span class="keyword">do</span> sth</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//to do sth</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 解决小问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>时间倒数计时UI的制作</title>
      <link href="/2019/10/30/%E6%97%B6%E9%97%B4%E5%80%92%E6%95%B0%E8%AE%A1%E6%97%B6UI%E7%9A%84%E5%88%B6%E4%BD%9C/"/>
      <url>/2019/10/30/%E6%97%B6%E9%97%B4%E5%80%92%E6%95%B0%E8%AE%A1%E6%97%B6UI%E7%9A%84%E5%88%B6%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h2 id="直入主题"><a href="#直入主题" class="headerlink" title="直入主题"></a>直入主题</h2><p>首先你需要一个txt的UI,然后还有一个float类型的总时间totalTime,我这是用秒为单位的,即你想计时5分钟,代码为<code>totalTime=300;</code>.</p><p>接着定义2个int类型的min和second.</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> min;</span><br><span class="line"><span class="keyword">int</span> second;</span><br><span class="line">Text timeTxt;</span><br></pre></td></tr></table></figure><a id="more"></a><p>紧接着在Update里面 <code>totalTime-=Time.deltaTime;</code> ,这样totalTime就开始计时了.min就等于剩余的时间/60,因为是int类型,所以只保留整数.second就等于剩余时间减去60*min.</p><p>由于Text的文本属于string类型,而string类型有个重载,可以设置显示的格式,代码如下</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Update</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>   &#123;</span><br><span class="line">       totalTime -= Time.deltaTime;</span><br><span class="line"></span><br><span class="line">       minute = (<span class="keyword">int</span>)totalTime/<span class="number">60</span>;</span><br><span class="line">       second = (<span class="keyword">int</span>)totalTime - <span class="number">60</span>*minute;</span><br><span class="line"></span><br><span class="line">       time.text =<span class="keyword">string</span>.Format(<span class="string">"&#123;0&#125;:&#123;1:D2&#125;"</span>,  minute, second);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>中括号是占位符,分号后面的D是保留几位数,<code>D2</code>的意义在于当秒数为9的时候,文本会显示为<code>4:09</code>而不是<code>4:9</code>。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 小技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>制作遥感</title>
      <link href="/2019/09/24/%E9%81%A5%E6%84%9F%E7%9A%84%E5%88%B6%E4%BD%9C/"/>
      <url>/2019/09/24/%E9%81%A5%E6%84%9F%E7%9A%84%E5%88%B6%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<p><strong>要实现的功能</strong><br>    当鼠标左键时,遥感出现。拖动鼠标时，控制遥圈的跟随。松开鼠标左键时，遥感还原。</p><hr><p><strong>思路</strong><br>    遥感的位置跟鼠标位置挂钩,而鼠标坐标是屏幕坐标,UI坐标就是UI坐标,所以我们要把鼠标坐标转为UI坐标,拖拽要用到EventSystems,<br>    紧接着写代码。</p><a id="more"></a><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.EventSystems; <span class="comment">// 引用拖拽事件的命名空间</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Test</span> : <span class="title">MonoBehaviour</span>,<span class="title">IDragHandler</span>,<span class="title">IEndDragHandler</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> RectTransform fillTf;<span class="comment">//要移动的UI</span></span><br><span class="line">    <span class="keyword">float</span> R = <span class="number">50</span>; <span class="comment">// 半径</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnDrag</span>(<span class="params">PointerEventData eventData</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Vector2 pos;</span><br><span class="line">        RectTransformUtility.ScreenPointToLocalPointInRectangle((RectTransform)fillTf.parent, eventData.position, eventData.pressEventCamera, <span class="keyword">out</span> pos);</span><br><span class="line">        Vector2 dir = pos - Vector2.zero;<span class="comment">//得到有方向有大小的Vector3</span></span><br><span class="line">        <span class="keyword">if</span> (Vector2.Distance(pos, Vector2.zero) &gt;= R)<span class="comment">//当超过给定的值时 圈圈位置就等于初始位置加上单位为1的方向乘R就是小圈圈运动的范围</span></span><br><span class="line">        &#123;</span><br><span class="line">            fillTf.anchoredPosition = dir.normalized * R; <span class="comment">//dir.normalized是一个有方向,大小为1的向量,乘上一个正数时 方向不变 大小变</span></span><br><span class="line">        &#125;                                                 <span class="comment">//乘上一个负数时方向变反</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            fillTf.anchoredPosition = pos;<span class="comment">//没超过就跟着鼠标位置</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnEndDrag</span>(<span class="params">PointerEventData eventData</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        fillTf.anchoredPosition = Vector3.zero;<span class="comment">//结束拖拽 复位</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>RectTransformUtility.ScreenPointToLocalPointInRectangle()</code>这个API要传4个参数:<br>第1个是传的是要拖拽UI的父级 意义是给予拖拽UI一个参考坐标系 fillTf.parent返回值是transfrom TectTransform是transform的子类 所以可以这样转 反过来不行 涉及到了里式转换原则<br> 第2个参数传的是鼠标位置 或者说这个就是API方法名里的ScreenPoint<br>第3个是当前的渲染UI的camera<br>第4个是返回的值<br>在鼠标拖拽时,<code>Vector2 dir = pos - Vector2.zero</code> 这个方向可以传给玩家,玩家就有了移动的方向。一定要记住是玩家操纵遥感时角色移动，而不是本末倒置。</p><p>等哪天有空了把各个坐标的转换写出来</p>]]></content>
      
      
      
        <tags>
            
            <tag> 功能 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>物体移动到鼠标点击位置</title>
      <link href="/2019/09/17/%E7%89%A9%E4%BD%93%E7%A7%BB%E5%8A%A8%E5%88%B0%E9%BC%A0%E6%A0%87%E7%82%B9%E5%87%BB%E4%BD%8D%E7%BD%AE/"/>
      <url>/2019/09/17/%E7%89%A9%E4%BD%93%E7%A7%BB%E5%8A%A8%E5%88%B0%E9%BC%A0%E6%A0%87%E7%82%B9%E5%87%BB%E4%BD%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p><strong>思路</strong><br>用射线检测实现,用协程移动,</p><a id="more"></a><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Move</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Start is called before the first frame update</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Update is called once per frame</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">if</span> (Input.GetMouseButtonDown(<span class="number">0</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            Ray ray = Camera.main.ScreenPointToRay(Input.mousePosition);</span><br><span class="line">            RaycastHit hit;</span><br><span class="line">            <span class="keyword">if</span> (Physics.Raycast(ray, <span class="keyword">out</span> hit))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (hit.transform.tag == <span class="string">"ground"</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    Vector3 pos =hit.point;</span><br><span class="line">                    pos.y = transform.position.y;</span><br><span class="line">                    StopAllCoroutines();</span><br><span class="line">                    StartCoroutine(Imove(pos));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">IEnumerator <span class="title">Imove</span>(<span class="params">Vector3 pos</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        transform.LookAt(pos);</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            transform.position = Vector3.MoveTowards(transform.position, pos, Time.fixedDeltaTime * <span class="number">30</span>);</span><br><span class="line">            <span class="keyword">if</span> (Vector3.Distance(transform.position, pos) &lt;= <span class="number">0.02f</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                transform.position = pos;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">yield</span> <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  记得把地面的标签设成<code>ground</code>,emmmm就这样吧。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 功能 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>int数组查重</title>
      <link href="/2019/08/26/%E6%9F%A5%E9%87%8D/"/>
      <url>/2019/08/26/%E6%9F%A5%E9%87%8D/</url>
      
        <content type="html"><![CDATA[<p><strong>思路</strong><br>利用Dictionary的<code>ContainValue()</code>方法和list的<code>ToArray()</code>方法返回一个新的数组。</p><a id="more"></a><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123; <span class="number">8</span>,<span class="number">2</span>,<span class="number">2</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">8</span>, &#125;;</span><br><span class="line">            <span class="keyword">int</span>[] newArr = Find(arr);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; newArr.Length; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(newArr[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">int</span>[] <span class="title">Find</span>(<span class="params"><span class="keyword">int</span>[] str</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">            List&lt;<span class="keyword">int</span>&gt; list = <span class="keyword">new</span> List&lt;<span class="keyword">int</span>&gt;();</span><br><span class="line">            Dictionary&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; dic = <span class="keyword">new</span> Dictionary&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;();<span class="comment">//List和Dictionary都必须先实例化再用。</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.Length; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (dic.ContainsValue(str[i]))</span><br><span class="line">                &#123;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span><span class="comment">//不包含才加进去</span></span><br><span class="line">                &#123;</span><br><span class="line">                    list.Add(str[i]);</span><br><span class="line">                    dic[index] = str[i];</span><br><span class="line">                    index++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//list.Sort();     如果你想打出来的数组是顺序排列的就用这个。</span></span><br><span class="line">            <span class="keyword">return</span> list.ToArray();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><p>有丶简单，就不细讲了，Dictionary是查Key（即<code>Dictionary&lt;int,int&gt;</code>左边那个int）得到value(即<code>Dictionary&lt;int,int&gt;</code>右边那个int)，还有<code>Dictionary.ContainValue()</code>传入一个value类型的值返回一个bool类型，然后就没有然后了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unity在3D模式下不能使用Sprite Editor</title>
      <link href="/2019/08/26/Unity%E6%96%B0%E7%89%88%E6%9C%AC%E7%9A%84%E5%B0%8F%E9%97%AE%E9%A2%98/"/>
      <url>/2019/08/26/Unity%E6%96%B0%E7%89%88%E6%9C%AC%E7%9A%84%E5%B0%8F%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="问题的出现"><a href="#问题的出现" class="headerlink" title="问题的出现"></a>问题的出现</h2><h2 id="之前没有的问题在Unity2019-2-0f1出现了，具体是在项目创建时因为选择了3D模式，进入后中途想换2D点击Sprite-Editor时提示缺少Sprite2DPackages。只需在工具栏的Window下选择Package-Manager-在左侧找到2D-Sprite或者直接搜索-2D-Sprite-然后在右下角点击Install就行了。"><a href="#之前没有的问题在Unity2019-2-0f1出现了，具体是在项目创建时因为选择了3D模式，进入后中途想换2D点击Sprite-Editor时提示缺少Sprite2DPackages。只需在工具栏的Window下选择Package-Manager-在左侧找到2D-Sprite或者直接搜索-2D-Sprite-然后在右下角点击Install就行了。" class="headerlink" title="之前没有的问题在Unity2019.2.0f1出现了，具体是在项目创建时因为选择了3D模式，进入后中途想换2D点击Sprite Editor时提示缺少Sprite2DPackages。只需在工具栏的Window下选择Package Manager,在左侧找到2D Sprite或者直接搜索 2D Sprite,然后在右下角点击Install就行了。"></a>之前没有的问题在Unity2019.2.0f1出现了，具体是在项目创建时因为选择了3D模式，进入后中途想换2D点击Sprite Editor时提示缺少Sprite2DPackages。只需在工具栏的Window下选择Package Manager,在左侧找到2D Sprite或者直接搜索 2D Sprite,然后在右下角点击Install就行了。</h2><p>  感觉3D项目下默认不安装2D Sprite是为了减少整个项目的大小，现在2D项目转3D项目一开始是少了Directional Light,加上去就行了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 解决小问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>查找和销毁子物体</title>
      <link href="/2019/08/14/%E6%9F%A5%E6%89%BE%E5%92%8C%E5%88%A0%E9%99%A4%E5%AD%90%E7%89%A9%E4%BD%93%E6%96%B9%E6%B3%95/"/>
      <url>/2019/08/14/%E6%9F%A5%E6%89%BE%E5%92%8C%E5%88%A0%E9%99%A4%E5%AD%90%E7%89%A9%E4%BD%93%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="查找子物体总个数（包括孙子（即子物体的子物体），曾孙（子物体的子物体的子物体"><a href="#查找子物体总个数（包括孙子（即子物体的子物体），曾孙（子物体的子物体的子物体" class="headerlink" title="查找子物体总个数（包括孙子（即子物体的子物体），曾孙（子物体的子物体的子物体))"></a>查找子物体总个数（包括孙子（即子物体的子物体），曾孙（子物体的子物体的子物体))</h2><hr><p><strong>思路：</strong><br>  <code>Transform.GetChild(index)</code>是获取当前物体下的第index个物体，返回值为Transform类型。<code>Transform.childCount</code>是获取当前物体下有多少个同级别的子物体个数（即不包括子物体的子物体）。有了这2个方法后，可以写一个方法来获取同级的个数。</p><a id="more"></a> <figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">FindChild</span>(<span class="params">Transform tf,<span class="keyword">ref</span> <span class="keyword">int</span> count</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">count=tf.childCount;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>   然后在Start()方法里调用这个方法就能获取当前同级下的子物体个数了。现在的问题在于：如何得到子物体的子物体。把FindChild方法给子物体不就能得到子物体了嘛。<br>   思路不就来了嘛，上面介绍了刚刚介绍了<code>Transform.GetChild(index)</code>方法,传入一个index得到第index个子物体，那么把第index个子物体传入<code>FindChild()</code>方法不就能找到它的子物体了嘛。有的人又问了：这只能得到第index个物体啊，我如果想全都要呢？全都要就用for循环啊，tf.childCount不就是全部子物体吗?</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">FindChild</span>(<span class="params">Transform tf.<span class="keyword">ref</span> <span class="keyword">int</span> count</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">count+=tf.childCount;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;tf.childCount;i++)</span><br><span class="line">&#123;</span><br><span class="line">FindChild(tf.GetChild(i),<span class="keyword">ref</span> count);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  注意上面count是+=tf.childCount,因为count是累加的。</p><hr><hr><h2 id="删除子物体"><a href="#删除子物体" class="headerlink" title="删除子物体"></a>删除子物体</h2><hr><p><strong>思路:</strong><br>  当你Destroy一个物体时，它的子物体也会被顺带删除，所以Destroy当前物体的子物体就行了。<br>  <figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">DestroyChild</span>(<span class="params">transform tf</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;tf.childCount;i++)</span><br><span class="line">&#123;</span><br><span class="line">Destroy(tf.GetChild(i).gameoject);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>  如果硬是要你用<code>DestroyImmidiate（）</code>这种方法，就有点搞人了。<del>C酱就是这样搞我们的</del><code>DestroyImmidiate()</code>是立即执行的，而在Start()方法里是每帧执行，这样导致了childCount一直在变。因此有2种方法。因为childCount一直在变，所以从子物体的最后一个开始删，就算childCount一直在变，他的最后一个也不会变。</p><h2 id="第一种方法"><a href="#第一种方法" class="headerlink" title="  第一种方法"></a>  <strong>第一种方法</strong></h2><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">DestroyA</span>(<span class="params">Transform tf</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=tf.childCount<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">&#123;</span><br><span class="line">DestroyImmediate(tf.GetChild(i).gameObject);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="第二种方法"><a href="#第二种方法" class="headerlink" title="第二种方法"></a><strong>第二种方法</strong></h2><p>  一直删除第一个，直到他的childCount为0，就跳出.</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">DestroyB</span>(<span class="params">transform tf</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>)</span><br><span class="line">&#123;</span><br><span class="line">DestroyImmediate(tf.GetChild(<span class="number">0</span>).gameObject);</span><br><span class="line"><span class="keyword">if</span>(tf.childCount==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>今天我又变强了！</title>
      <link href="/2019/08/11/%E4%BB%8A%E5%A4%A9%E6%88%91%E5%8F%88%E5%8F%98%E5%BC%BA%E4%BA%86/"/>
      <url>/2019/08/11/%E4%BB%8A%E5%A4%A9%E6%88%91%E5%8F%88%E5%8F%98%E5%BC%BA%E4%BA%86/</url>
      
        <content type="html"><![CDATA[<h2 id="如题所示"><a href="#如题所示" class="headerlink" title="如题所示"></a>如题所示</h2><p>今天我把二连跳弄出来了，思路很简单，想到就直接打出来了。还通宵弄了个vps，这下可以不用忍受辣鸡<del>翻墙软件</del>的龟速了。明天继续变强!</p><a id="more"></a><hr><p><strong>二连跳思路：</strong><br>  最开始的思路是在<code>Input.GetKeyDown(KeyCode.Space).</code>里用一个参数控制它只能跳两次。首先想到的是用int类型定义一个变量JumpCount,默认为0次,当按下空格键时，JumpCount自增一次。然后当<code>JumpCount==2</code>时，return这个按下空格键操作。<br>  限制跳跃次数后，紧接着要把JumpCount清0。此时你脑海里第一个想法肯定是碰到地面清0，这时肯定是在检查碰撞方法中完成。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnCollisionEnter2D</span>(<span class="params">Collision2D collision</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        JumpCount = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>  但是问题又来了，当你碰到除了地面的东西，比如墙壁，比如道具盒子，比如你碰到任何除了地面的物体时，你都能二段跳，这与我们的想法差强人意（成语鬼才是我），这时，解决这种问题的方法就是，<strong>设tag</strong>。代码改成：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnCollisionEnter2D</span>(<span class="params">Collision2D collision</span>)</span></span><br><span class="line"><span class="function"></span>   &#123;</span><br><span class="line">       <span class="keyword">if</span> (collision.gameObject.tag==<span class="string">"ground"</span>)</span><br><span class="line">       &#123;</span><br><span class="line">           JumpCount = <span class="number">0</span>;</span><br><span class="line">       &#125;</span><br><span class="line">   ｝</span><br></pre></td></tr></table></figure><hr><p>  <img src="/2019/08/11/今天我又变强了/1.png" alt="举个栗子"></p><hr>]]></content>
      
      
      
        <tags>
            
            <tag> 小技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的第一篇博客</title>
      <link href="/2019/08/10/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
      <url>/2019/08/10/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="我成功啦！！"><a href="#我成功啦！！" class="headerlink" title="我成功啦！！"></a>我成功啦！！</h1><h2 id="我成功啦！！-1"><a href="#我成功啦！！-1" class="headerlink" title="我成功啦！！"></a>我成功啦！！</h2><hr><p><del>这是我自己弄出来的博客!</del><br>这是我在b站看<strong>codeSheep</strong>视频弄出来的博客<br>感谢codeSheep!</p><p>接下来我会在这个博客中记录我在学习或工作中遇到的难题困难和解决思路。<br>当然如果有一些小技巧我也会记录下来。</p><p>冲鸭！</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
